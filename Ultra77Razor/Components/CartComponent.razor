@inject MssqlContext _context
@inject IHttpContextAccessor _accessor

@using UpakDataAccessLibrary.DataContext
@using UpakModelsLibrary.Models
@using UpakUtilitiesLibrary
@using UpakUtilitiesLibrary.Utility.Extentions

<form method="post" class="cart-wrapper">
        <div class="cart-header">
          <a asp-page="./Index" class="head-submit-button">
            <div class="triangle triangle-right"></div>
            <p>На главную</p>
          </a>
          <h3>Ваша корзина</h3>
          <a href='javascript:history.go(-1)' class="head-submit-button">
            <div class="triangle triangle-right"></div>
            <p>Вернуться</p>
          </a>
        </div>
        <div class="cart-content">
            @if(ProductList.Count>0)
    {
        @foreach (var item in ProductList)
        {
            <div class="cart-product">

                <div class="product-dictionary">
                    <p>@item.Name</p>
                </div>
                <div class="cart-card">
                    <div class="cart-product-image">
                        <img src="@item.Image!.DataArrayToImageUrl()" alt="">
                    </div>
                    <div class="number-wrapper">
                        <div class="number cart-number">
                            <div class="number-input">
                                <input id="inputNumber" type="number" min="0" value="1"/>
                            </div>
                            <div class="number-label">
                                <p>ШТ.</p>
                            </div>
                            <div class="number-buttons">
                                <button class="number-minus" type="button"
                                        onclick="this.parentNode.parentNode.querySelector('input[type=number]').stepUp();">
                                    <P>+</P>
                                </button>
                                <button class="number-plus" type="button"
                                        onclick="this.parentNode.parentNode.querySelector('input[type=number]').stepDown(); ">
                                    <p>-</p>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="price-one" ><span id="priceOne">@item.RetailPrice</span> р.</div>
                    <div class="price-percount"><span id="pricePerCount"></span> р.</div>
                    <a href="#" class="delete-submit submit-button">Удалить</a>
                </div>
            </div>
        }
        <div class="cart-summary">
            <p>Итого</p>
            <div class="total">
              <div class="price-total">8500 р.</div>
              <a href="#" class="confirm-submit submit-button">Оформить заказ</a>
            </div>
          </div>
           }
        else
        {
            <p>Корзина пуста</p>
        }
        </div>
        <div class="cart-footer">
          <p></p>
        </div>
      </form>

@code {
    
    public List<ShoppingCart>? ShoppingCartList { get; set; } = new List<ShoppingCart>();
    [Parameter]
    public List<Product> ProductList { get; set; } = new List<Product>();

    public void GetShoppingCartList()
    {
        if (_accessor.HttpContext?.Session.Get<IEnumerable<ShoppingCart>>(WebConstants.SessionCart) != null &&
            _accessor.HttpContext?.Session.Get<IEnumerable<ShoppingCart>>(WebConstants.SessionCart).Count() > 0)
        {
            ShoppingCartList = _accessor.HttpContext?.Session.Get<List<ShoppingCart>>(WebConstants.SessionCart);
        }
        List<int?> prodInCart = ShoppingCartList.Select(i => i.ProductId).ToList();
        ProductList = _context.Products.Where(u => prodInCart.Contains(u.Id)).ToList();
    }

    
}